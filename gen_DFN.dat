//==============================================================================  
// General Options & Fracture Network Parameters:   
//==============================================================================   
 
stopCondition: 0 
/* 0: stop once nPoly fractures are accepted (Defined below)  
1: stop once all family's p32 values are equal or greater than the families  
target p32 values (defined in stochastic family sections)  
*/               
 
nPoly: 220 
/* Used when stopCondition = 0  
Total number of fractures you would like to have   
in the domain you defined. The program will complete   
once you have nPoly number of fractures,   
maxPoly number of polygon/fracture rejections,   
rejPoly number of rejections in a row, or reach a   
specified fracture cluster size if using   
stoppingParameter = -largestSize  */  
 
 
 
domainSize: {15.0,15.0,15.0}  
/* Mandatory Parameter.  
Creates a domain with dimension x*y*z centered at the origin.*/  
 
numOfLayers: 0    //number of layers  
layers:   
{0,0}  
/*  Layers need to be listed line by line  
Format: {minZ, maxZ}  
 
The first layer listed is layer 1, the second is layer 2, etc  
Stochastic families can be assigned to theses layers (see stochastic  
shape family section)   
*/     
 
 
numOfRegions: 0 // Number of regions  
regions:   
{}  
 
/*  Regions need to be listed line by line  
Format: {minX, maxX, minY, maxY, minZ, maxZ}  
 
The first region listed is region 1, the second is region 2, etc  
Stochastic families can be assigned to theses layers (see stochastic  
shape family section)   
*/     
 
removeFracturesLessThan: 0  
/*   
Options:   
0 - Ignore this option, keep all fractures.   
 
Size of minimum fracture radius. Fractures smaller than   
defined radius will be removed AFTER DFN generation.   
 
Minimum and maximum size options under fracture family   
distributions will still be used while generating the DFN.   
*/  
 
 
orientationOption: 0   
/* Fracture Orientation Option  
0 : Spherical Coordinates  
1 : Trend / Plunge   
2 : Dip / Strike   
*/  
 
 
h: 0.01 
/* Minimum fracture length scale(meters)  
Any fracture with a feature, such as and intersection, of less than h will be rejected. */  
 
radiiListIncrease: 0.1  
/*  Percent to increase the size of the pre-generated radii lists, per family.    
Example: 0.2 will increase the size of the list by %20.   
 
Lists are pre-generated and are used to insert fractures from largest to    
smallest in order to help hit target distributions.     
 
If the accepted+rejected count of fractures is much different than the   
estimated number of fractures needed with the percentage extra added in,    
you will not get your expected distribution.    
*/   
 
 
/*==========================================================================*/   
/*  File Output Options:                                                    */   
/*==========================================================================*/   
 
/* An output file (radii.dat) is always generated and contains all radii of   
fractures in the domain (before and after truncation).   
*/   
 
outputAllRadii: 0  
/*  Caution: Can create very large files.   
Outputs all fractures which were generated during    
DFN generation (Accepted + Rejected).   
0: Do not output all radii file.  
1: Include file of all raddii (accepted+rejected fractures)  
in output files.  
*/  
 
 
outputFinalRadiiPerFamily: 0   
/*  Outputs radii files after isolated fracture removal.   
One file per family.   
0: Do not create output files of radii per family   
1: Creates output files per family, containing a list    
of the family's fracture radii that is in the final DFN   
*/   
 
 
outputAcceptedRadiiPerFamily: 0   
/*  Outputs radii files before isolated fracture removal.   
One file per family.   
0: Do not create output files of radii per family   
1: Creates output files per family, containing a list   
of the family's fracture radii in the domain before isolated   
fracture removal.            
*/    
 
//==========================================================================//  
/* Fracture Network Parameters:                                             */  
//==========================================================================//   
 
tripleIntersections: 0  
/* Options:     0: Off  
1: On    */  
 
forceLargeFractures: 0  
/*  Inserts the largest possible fracture for each defined fracture family,    
defined by the user-defined maxium radius   
0 - Off (Do not force insertion of largest fractures)   
1 - On  (Force insertion of largest fractures)   
*/   
 
printRejectReasons: 0  
/* Useful for debugging,   
This option will print all fracture rejection reasons as they occur.  
0: disable  
1: print all rejection reasons to screen  
*/  
 
disableFram: 0  
/* This option disables the FRAM algorithm. There will be no    
fracture rejections or fine mesh. Defaults visualizationMode to 0.   
0 - Disable FRAM   
1 - Enable  FRAM   
*/   
 
visualizationMode:  0  
/* Options: 0 or 1   
Used during meshing:   
0: creates a fine mesh, according to h parameter;  
1: produce only first round of triangulations. In this case no   
modeling of flow and transport is possible. */   
 
seed: 51 
//Seed for random generator. 0 = seed off clock   
 
 
domainSizeIncrease: {2.0,2.0,2.0}  
//temporary size increase for inserting fracture centers outside domain  
//increases the entire width by this ammount. So, {1,1,1} will increase  
//the domain by adding .5 to the +x, and subbtracting .5 to the -x, etc  
 
keepIsolatedFractures: 0   
/*  0 - Remove any isolated fracture (not clusters)  
1 - Keep all fractures in the domain  
*/  
 
keepOnlyLargestCluster: 1  
/* 0 = Keep any clusters which connects the specified   
boundary faces in boundaryFaces option below  
 
1 = Keep only the largest cluster which connects   
the specified boundary faces in boundaryFaces option below  
*/  
 
ignoreBoundaryFaces: 0   
/*  
0 = use boundaryFaces option below   
 
1 = ignore boundaryFaces option and keep all clusters and  
will still remove fractures with no intersections                 
 
If ignoreBoundaryFaces is also set to 1, DFNGen will keep the largest   
cluster which connects at least any two sides of the domain.   
*/  
 
 
boundaryFaces: {1,1,0,0,0,0}  
/*  DFN will only keep clusters with connections to domain boundaries which are set to 1:  
 
boundaryFaces[0] = +X domain boundary  
boundaryFaces[1] = -X domain boundary  
boundaryFaces[2] = +Y domain boundary  
boundaryFaces[3] = -Y domain boundary  
boundaryFaces[4] = +Z domain boundary  
boundaryFaces[5] = -Z domain boundary      
 
Be sure to set ignoreBoundaryFaces to 0 when using this feature.       
*/  
 
 
rejectsPerFracture: 10  /*If fracture is rejected, it will be re-translated to a new  
position this number of times.   
 
This helps hit distribution targets for stochastic families   
(Set to 1 to ignore this feature)    */  
 
 
 
 
//===========================================================================  
//                  Shape and Probability Parameters  
//===========================================================================  
 
//user rectangles and user Ellipses defined in their cooresponding files  
 
famProb: {1.0}   
/* Probability of occurrence of each family of randomly distrubuted rectangles  
and ellipses.  
User-ellipses and user-rectangles insertion will be attempted with 100%   
likelihood, but with possability they may be rejected.  
The famProb elements should add up to 1.0 (for %100).  
The probabilities are listed in order of families starting with all stochastic  
ellipses, and then all stochastic rectangles.  
 
For example:   
If  then there are two ellipse families, each with probabiliy .3,   
and two rectangle families, each with probabiliy .2, famProb will be:  
famProb: {.3,.3,.2,.2} Notice: famProb elements add to 1           
*/  
 
 
insertUserRectanglesFirst: 0  
/*  
1: User rectangles will be inserted first  
0: User ellipses will be inserted first  
*/  
 
/*===========================================================================*/  
//===========================================================================  
//                      Elliptical Fracture Options                                       
//      NOTE: Number of elements must match number of ellipse families    
//            (first number in nShape input parameter)                           
//===========================================================================  
/*===========================================================================*/  
 
//Number of ellipse families  
nFamEll: 1  
//Having this option = 0 will ignore all rectangle family variables  
 
eLayer: {0}  
/* Defines which domain the family belongs to.  
Layer 0 is the entire domain.  
Layers numbered > 0 corresponds to layers defined above  
1 corresponds to the first layer listed, 2 is the next layer listed, etc */  
 
 
eRegion: {0}  
/* Defines which domain the family belongs to.  
Region 0 is the entire domain.  
Regions numbered > 0 correspond to layers defined above  
1 correspond to the first region listed, 2 is the next region listed, etc */  
 
 
 
//edist is a mandatory parameter if using statistically generated ellipses   
edistr: {2}   /* Ellipse statistical distribution options:  
1 - lognormal distribution  
2 - truncated power law distribution     
3 - exponential distribution  
4 - constant */  
 
 
ebetaDistribution: {1}   /* Beta is the rotation around the polygon's normal  
vector, with the polygon centered on x-y plane at the orgin   
 
0 - uniform distribution [0, 2PI]      
1 - constant angle (specefied below by "ebeta")    */                  
 
 
e_p32Targets: {0.60}  
/* Elliptical families target fracture intensity per family.  
When using stopCondition = 1 (defined at the top of the input file), families will   
be inserted untill the families desired fracture intensity has been reached.   
Once all families desired fracture intensity has been met, fracture generation will   
be complete.  
*/                        
 
//===========================================================================  
// Parameters used by all stochastic ellipse families   
// Mandatory Parameters if using statistically generated ellipses    
 
easpect: {1}  /* Aspect ratio. Used for lognormal and truncated   
power law distribution. */  
 
enumPoints: {8} /*Number of vertices used in creating each elliptical   
fracture family. Number of elements must match number   
of ellipse families (first number in nShape) */  
 
eAngleOption: 1     /* All angles for ellipses:   
0 - degrees  
0 - Radians (Must use numerical value for PI) */  
 
etheta: {0} /*Ellipse fracture orientation.  
The angle the normal vector makes with the z-axis */  
 
ephi: {0}   /* Ellipse fracture orientation.  
The angle the projection of the normal onto the x-y plane  
makes with the x-axis */  
 
ebeta: {0}   /* rotation around the normal vector */  
 
 
ekappa: {0.1}  /*Parameter for the fisher distribnShaprutions. The bigger, the more   
similar (less diverging) are the elliptical familiy's  
normal vectors */                  
 
//===========================================================================  
// Options Specific For Ellipse Lognormal Distribution (edistr=1):   
// Mandatory Parameters if using ellispes with lognormal distribution   
 
//          NOTE: Number of elements must match number of  
//                ellipse families (first number in nShape)  
 
eLogMean: {2}  //Mean value For Lognormal Distribution.         
 
 
esd: {.5} // Standard deviation for lognormal distributions of ellipses  
 
eLogMin: {1}  
 
eLogMax: {15}  
 
//===========================================================================  
//     Options Specific For Ellipse Exponential Distribution (edistr=3):   
//     Mandatory Parameters if using ellispes with exponential distribution   
 
 
eExpMean: {2}  //Mean value for Exponential  Distribution       
 
eExpMin: {1}  
 
eExpMax: {5}  
 
//===========================================================================  
//    Options Specific For Constant Size of ellipses (edistr=4):  
 
econst: {10, 10, 10}  // Constant radius, defined per family       
 
//===========================================================================  
// Options Specific For Ellipse Truncated Power-Law Distribution (edistr=2)  
// Mandatory Parameters if using ellipses with truncated power-law dist.   
 
// NOTE: Number of elements must match number   
//       of ellipse families (first number in nShape)  
 
emin: {1.0}  
// Minimum radius for each ellipse family.   
// For power law distributions.   
 
emax: {5.0}  
// Maximum radius for each ellipse family.  
// For power law distributions.   
 
ealpha: {2.0}  
// Alpha. Used in truncated power-law   
// distribution calculation  
 
 
/*==================================================================================*/  
/*==================================================================================*/  
/*                             Rctangular Fractures Options                         */  
/* NOTE: Number of elements must match number of rectangle families                 */  
/*       (second number in nShape parameter)                                        */  
/*==================================================================================*/  
/*==================================================================================*/  
 
//Number of rectangle families  
nFamRect: 0  
//Having this option = 0 will ignore all rectangle family variables  
 
 
rLayer: {}  
/* Defines which domain the family belongs to.  
Layer 0 is the entire domain.  
Layers numbered > 0 corresponds to layers defined above  
1 corresponds to the first layer listed, 2 is the next layer listed, etc */  
 
 
rRegion: {}  
/* Defines which domain the family belongs to.  
Region 0 is the entire domain.  
Regions numbered > 0 correspond to layers defined above  
1 corresponds to the first region listed, 2 is the next region listed, etc */  
 
 
/*rdist is a mandatory parameter if using statistically generated rectangles */  
rdistr: {}   /*  Rectangle statistical distribution options:  
1 - lognormal distribution  
2 - truncated power law distribution   
3 - exponential distribution  
4 - constant */  
 
rbetaDistribution: {}   /* Beta is the rotation/twist about the z axis  
with the polygon centered on x-y plane at the orgin   
before rotation into 3d space  
 
0 - uniform distribution [0, 2PI]      
1 - constant angle (specefied below by "rbeta")  
 
*/                                                   
 
r_p32Targets: {}   
/* Rectangle families target fracture intensity per family.  
When using stopCondition = 1 (defined at the top of the input file), families will   
be inserted untill the families desired fracture intensity has been reached.   
Once all families desired fracture intensity has been met, fracture generation will   
be complete.  
*/        
 
//============================================================================   
// Parameters used by all stochastic rectangle families   
// Mandatory Parameters if using statistically generated rectangles     
 
raspect: {}  /* Aspect ratio */  
 
rAngleOption: 0     /* All angles for rectangles:   
0 - degrees  
1 - radians (must be numerical value, cannot use "Pi") */  
 
rtheta: {0, 1.57, 1.57} /*Rectangle fracture orientation.  
The angle the normal vector makes with the z-axis */  
 
rphi: {0, 0, 1.57} /* Rectangle fracture orientation.  
The angle the projection of the normal onto the x-y  
plane makes with the x-axis */  
 
rbeta: {0, 0, 0}   /* rotation around the normal vector */  
 
rkappa: {100, 100, 100}  /*Parameter for the fisher distributions. The bigger,   
the more similar (less diverging) are the rectangle   
familiy's normal vectors  */  
 
//=============================================================================  
// Options Specific For Rectangle Lognormal Distribution (rdistr=1):  
// Mandatory Parameters if using rectangles with lognormal distribution   
 
rLogMean: {1.6}   /*For Lognormal Distribution.   
Mean radius (1/2 rectangle length) in   
lognormal distribution for rectangles. */  
 
 
rsd: {.4}     /* Standard deviation for lognormal distributions of   
rectangles */  
 
rLogMin: {2}  
 
rLogMax: {10}                        
 
//=============================================================================  
// Options Specific For Rectangle Truncated Power-Law Distribution (rdistr=2):   
// Mandatory Parameters if using rectangles with power-law distribution   
 
rmin: {1,1}         /* Minimum radius for each rectangle family.   
For power law distributions. */  
 
rmax: {6,5}   /* Maximum radius for each rectangle family.  
For power law distributions. */  
 
ralpha: {2.4,2.5}   // Alpha. Used in truncated power-law   
// distribution calculation  
 
 
/*===========================================================================*/  
/* Options Specific For Rectangle Exponential Distribution (edistr=3):       */  
/* Mandatory Parameters if using rectangules with exponential distribution   */  
 
rExpMean: {2}  //Mean value for Exponential  Distribution  
 
rExpMin: {1}  
 
rExpMax: {10}  
 
/*===========================================================================*/  
/* Options Specific For Constant Size of rectangles (edistr=4):              */  
 
rconst: {2, 2, 2}  // Constant radius, defined per rectangular family         
 
 
/*===========================================================================*/  
/*===========================================================================*/  
/*  User-Specified Ellipses                                                  */  
/*  Mandatory Parameters if using user-ellipses                              */  
/*  NOTE: Number of elements must match number of user-ellipse families.     */  
/*  NOTE: Only one user-ellipse is placed into the domain per defined        */  
/*        user-ellipse, with possibility of being rejected                   */  
/*===========================================================================*/  
/*===========================================================================*/  
 
userEllipsesOnOff: 0  
/*  0 - User ellipses off  
1 - User ellipses on  
*/  
 
UserEll_Input_File_Path: /home/jharrod/GitProjects/DFNGen/DFNC++Version/inputFiles/userPolygons/uEllInput.dat  
 
 
/*===========================================================================*/  
/*===========================================================================*/  
/*  User-Specified Ellipses                                                  */  
/*  Mandatory Parameters if using user-ellipses                              */  
/*  NOTE: Number of elements must match number of user-ellipse families.     */  
/*  NOTE: Only one user-ellipse is placed into the domain per defined        */  
/*        user-ellipse, with possibility of being rejected                   */  
/*===========================================================================*/  
/*===========================================================================*/  
 
userEllByCoord: 0  
/*  0 - User ellipses defined by coordinates off  
1 - User ellipses defined by coordinates on  
*/  
 
EllByCoord_Input_File_Path: /home/jharrod/GitProjects/DFNGen/DFNC++Version/inputFiles/userPolygons/ellCoords.dat  
 
 
/*===========================================================================*/  
/*===========================================================================*/  
/*  User-Specified Rectangles                                                */  
/*  NOTE: Number of elements must match number of user-ellipse families      */  
/*  NOTE: Only one user-rectangle is placed into the domain per defined      */  
/*        user-rectangle, with possibility of being rejected                 */  
/*===========================================================================*/  
/*===========================================================================*/  
 
userRectanglesOnOff: 0  
/*  0 - User Rectangles off  
1 - User Rectangles on  
*/  
 
UserRect_Input_File_Path: /home/jharrod/GitProjects/DFNGen/DFNC++Version/inputFiles/userPolygons/ignoreConnTest.dat  
 
 
/*===========================================================================*/  
/*===========================================================================*/  
/*                                                                           */  
/*  User Rectangles Defined By Coordinates                                   */  
/*                                                                           */  
/*===========================================================================*/  
/*===========================================================================*/  
 
userRecByCoord: 0  
/*  0 - User defined rectangles by coordinates off  
1 - User defined rectangles by coordinates on  
*/  
 
RectByCoord_Input_File_Path: ~/GitProjects/DFNGen/DFNC++Version/inputFiles/userPolygons/rectCoords.dat  
 
/*  WARNING: This option can cause LaGriT errors if the polygon  
vertices are not put in clockwise or counter-clockwise order.  
If errors (Usualy seg fualt during meshing in LaGriT),  
make sure the vertices are in clockwise or counter clockwise  
order. Also, coordinates must be co-planar.  
*/  
 
 
/*===========================================================================*/  
// Aperture [m]  
/* Mandatory parameter, and can be specified in several ways:  
- 1)meanAperture and stdAperture for using LogNormal distribution.  
- 2)apertureFromTransmissivity, first transmissivity is defined, and then,   
using a cubic law, the aperture is calculated;  
- 3)constantAperture, all fractures, regardless of their size, will have   
the same aperture value;  
- 4)lengthCorrelatedAperture, aperture is defined as a function of fracture size*/  
 
//NOTE: Only one aperture type may be used at a time   
 
aperture: 4  //choise of aperture option described above  
 
//(**** 1)meanAperture and stdAperture for using LogNormal distribution.********)  
meanAperture:  3 /*Mean value for aperture using    
normal distribution */  
stdAperture: 0.8  //Standard deviation       
 
/*(****** 2)apertureFromTransmissivity, first transmissivity is defined,   
and then, using a cubic law, the aperture is calculated;***************/  
apertureFromTransmissivity: {1.6e-9, 0.8}  
/* Transmissivity is calculated as transmissivity = F*R^k,  
where F is a first element in aperturefromTransmissivity,  
k is a second element and R is a mean radius of a polygon.   
Aperture is calculated according to cubic law as   
b=(transmissivity*12)^1/3 */  
 
/*(****** 3)constantAperture, all fractures, regardless of their size,   
will have the same aperture value;    **********************************/  
 
constantAperture: 1e-5  //Sets constant aperture for all fractures   
 
/*(******** 4)lengthCorrelatedAperture, aperture is defined as a function of   
fracture size *******************/  
 
lengthCorrelatedAperture: {5e-04, 0.5}  
/*Length Correlated Aperture Option:  
Aperture is calculated by: b=F*R^k,  
where F is a first element in lengthCorrelatedAperture,   
k is a second element and R is a mean radius of a polygon.*/  
 
 
//============================================================================  
//Permeability   
/* Options:  
0: Permeability of each fracture is a function of fracture aperture,   
given by k=(b^2)/12, where b is an aperture and k is permeability  
1: Constant permeabilty for all fractures */  
 
permOption: 0  //See above for options  
 
constantPermeability: 1e-12  //Constant permeability for all fractures   
 
 
 
 
 
/*===========================================================================*/  
/*===========================================================================*/  
/*                                                                           */  
/*  User Polygon Defined By Coordinates                                   */  
/*                                                                           */  
/*===========================================================================*/  
/*===========================================================================*/  
 
userPolygonByCoord: 0  
/*  0 - User defined polygon by coordinates off  
1 - User defined polygon by coordinates on  
*/  
 
PolygonByCoord_Input_File_Path: ./  
 
/*WARNING: userDefCoordRec can cause LaGriT errors because the polygon   
vertices are not put in clockwise or counter-clockwise order.  
If errors (Usualy seg fualt during meshing if using LaGriT),   
try to reorder the points till u get it right.  
Also, coordinates must be co-planar */  
